@page "/t"

@using NOSQLTask.Repository
@using NOSQLTask.Data
@using System.Linq
@using System.Collections.Generic
@inject ICategoryRepository Categories
@inject IClientRepository Clients
@inject IInvoiceRepository Invoices
@inject INeo4jRepository Neo4j
@inject IProductRepository Products
@inject IVisitLogRepository Logs

<h3>example</h3>

<input type="button" @onclick="Execute" />
<input type="button" @onclick="Populate" value="Add test data" />

@*@productsBoughtSameVisits
    @productsSameCategory
    @productsVisitedOthers*@

@code {
    [Parameter]
    public Client client { get; set; } = new Client();

    public List<Product> productsVisitedOthers = new List<Product>();
    public List<Product> productsSameCategory = new List<Product>();
    public List<Product> productsBoughtSameVisits = new List<Product>();

    public async Task Populate()
    {
        for (int i = 0; i < 3; i++)
        {
            await Clients.AddClient(new Client { Name = i + "Client " + DateTime.Now });
        }

        for (int i = 1000; i < 1010; i++ +)
        {
            await Products.AddProduct(new Product { ProductId = i.ToString(), Price = i, Quantity = i, Specification = "TEST", Category = "TEST", Type = "TEST" });
        }

        var invoices = new List<Invoice>()
    {
             new Invoice { ClientId = 1, ProductIds = {"1000", "1001", "1002" }, Status = true },
             new Invoice { ClientId = 1, ProductIds = {"1003", "1004", "1005" }, Status = false },
             new Invoice { ClientId = 2, ProductIds = {"1000", "1006" }, Status = true }
        };

        await Invoices.AddInvoice(invoices[0]);
        await Invoices.AddInvoice(invoices[1]); //not paid invoice, what should not appear
        await Invoices.AddInvoice(invoices[2]);

        await Logs.AddLog(new VisitLog() { ClientId = 3, FromProduct = "1000", ToProduct = "1008" });
        await Logs.AddLog(new VisitLog() { ClientId = 3, FromProduct = "1000", ToProduct = "1009" });
        await Logs.AddLog(new VisitLog() { ClientId = 2, FromProduct = "1007", ToProduct = "1000" });

        var x = new Category() { Description = "TEST1", Name = "Electronics" };
        await Categories.AddCategory(x);
        var y = new Category() { Description = "TEST2", Name = "Washboards" };
        await Categories.AddCategory(y);

        foreach (var item in invoices)
        {
            int i = 0;
            foreach (var id in item.ProductIds)
            {
                var l = i; //not sure about if variable 'i' would work correctly here due to async nature
                await Neo4j.AddData(1, id, x, item.InvoiceId, l);
                i++;
            }
        }
    }

    public async Task Execute()
    {
        //postgres
        client = await Clients.GetClient(1);

        //neo4j
        var orders = await Neo4j.GetOrders(client.ClientId);

        //Mongo
        var paidInvoices = new List<Invoice>
    ();

        foreach (Order order in orders)
        {
            var invoice = await Invoices.GetInvoice(order.InvoiceId);
            if (invoice.Status)
                paidInvoices.Add(invoice);
        }

        //var y = await Invoices.GetAllInvoicesByClient(client.ClientId);

        //Продукты из тех же категорий, что и те, которые покупал клиент
        //Neo4j
        var neo4jProducts = await Neo4j.GetProducts(paidInvoices.First().InvoiceId);
        //Redis
        foreach (var p in neo4jProducts)
        {
            var product = await Products.GetProduct(p.ProductId);
            productsSameCategory.Add(product);
        }


        //Что смотрели вместе с этим продуктом
        var prId = paidInvoices.First().ProductIds.First();
        //Mongo
        var ClientsSameProduct = await Invoices.GetClientsIdByProduct(prId); //TODO: Change for loop possibly
        var clId = ClientsSameProduct.First();
        //ES
        var Visited = await Logs.GetLogsFrom(clId, prId);
        //Redis
        foreach (var log in Visited)
        {
            var product = await Products.GetProduct(log.ToProduct);
            productsVisitedOthers.Add(product);
        }

        //TODO: Что покупали те, кто, смотрел продукт вместе с ним
        var sameVisits = await Logs.GetLogsSameProduct(client.ClientId, prId);
        var sv = sameVisits.First().ClientId;

        var ordersSV = await Neo4j.GetOrders(sv);

        //Mongo
        var paidInvoicesSV = new List<Invoice>
            ();

        foreach (Order order in ordersSV)
        {
            var invoice = await Invoices.GetInvoice(order.InvoiceId);
            if (invoice.Status)
                paidInvoicesSV.Add(invoice);
        }

        foreach (var p in paidInvoicesSV.First().ProductIds)
        {
            var product = await Products.GetProduct(p);
            productsBoughtSameVisits.Add(product);
        }
    }
}
