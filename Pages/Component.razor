@page "/t"

@using NOSQLTask.Repository
@using NOSQLTask.Data
@using System.Linq
@using System.Collections.Generic
@inject ICategoryRepository Categories
@inject IClientRepository Clients
@inject IInvoiceRepository Invoices
@inject INeo4jRepository Neo4j
@inject IProductRepository Products
@inject IVisitLogRepository Logs

<h3>example</h3>

<input type="text" name="ClientId" @bind="ClientId" />

<input type="button" @onclick="Execute" value="Execute" />
<input type="button" @onclick="Populate" value="Add test data" />

<p>Offers for @client.Name</p>
@if (productsSameCategory == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <p>Products from same category</p>
    <table class="table">
        <thead>
            <tr>
                <th>id</th>
                <th>Name</th>
                <th>Price</th>
                <th>Specification</th>
                <th>Category</th>
                <th>Quantity</th>
            </tr>
        </thead>
        <tbody>
            @for (int i = 0; i < productsSameCategory.Count; i++)
            {
                var l = i; //local index
            <tr>
                <td>@productsSameCategory[l].ProductId</td>
                <td>@productsSameCategory[l].Type</td>
                <td>@productsSameCategory[l].Price</td>
                <td>@productsSameCategory[l].Specification</td>
                <td>@categories.Where(x => x.CategoryId.Equals(productsSameCategory[l].Category)).FirstOrDefault().Name</td>
                <td>@productsSameCategory[l].Quantity</td>
            </tr>
            }
        </tbody>
    </table>
}
@if (productsBoughtSameVisits == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <p>Products bought by others</p>
    <table class="table">
        <thead>
            <tr>
                <th>id</th>
                <th>Name</th>
                <th>Price</th>
                <th>Specification</th>
                <th>Category</th>
                <th>Quantity</th>
            </tr>
        </thead>
        <tbody>
            @for (int i = 0; i < productsBoughtSameVisits.Count; i++)
            {
                var l = i; //local index
            <tr>
                <td>@productsBoughtSameVisits[l].ProductId</td>
                <td>@productsBoughtSameVisits[l].Type</td>
                <td>@productsBoughtSameVisits[l].Price</td>
                <td>@productsBoughtSameVisits[l].Specification</td>
                <td>@categories.Where(x => x.CategoryId.Equals(productsBoughtSameVisits[l].Category)).FirstOrDefault().Name</td>
                <td>@productsBoughtSameVisits[l].Quantity</td>
            </tr>
            }
        </tbody>
    </table>
}
@if (productsVisitedOthers == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <p>Products visited by others</p>
    <table class="table">
        <thead>
            <tr>
                <th>id</th>
                <th>Name</th>
                <th>Price</th>
                <th>Specification</th>
                <th>Category</th>
                <th>Quantity</th>
            </tr>
        </thead>
        <tbody>
            @for (int i = 0; i < productsVisitedOthers.Count; i++)
            {
                var l = i; //local index
                <tr>
                    <td>@productsVisitedOthers[l].ProductId</td>
                    <td>@productsVisitedOthers[l].Type</td>
                    <td>@productsVisitedOthers[l].Price</td>
                    <td>@productsVisitedOthers[l].Specification</td>
                    <td>@categories.Where(x => x.CategoryId.Equals(productsVisitedOthers[l].Category)).FirstOrDefault().Name</td>
                    <td>@productsVisitedOthers[l].Quantity</td>
                </tr>
            }
        </tbody>
    </table>
}

@*@productsBoughtSameVisits
    @productsSameCategory
    @productsVisitedOthers*@

@code {
    [Parameter]
    public int ClientId { get; set; } = 1;
    [Parameter]
    public List<Category> categories { get; set; } = new List<Category>();
    public Client client { get; set; } = new Client();

    public List<Product> productsVisitedOthers = new List<Product>();
    public List<Product> productsSameCategory = new List<Product>();
    public List<Product> productsBoughtSameVisits = new List<Product>();

    public async Task Populate()
    {
        //for (int i = 0; i < 3; i++)
        //{
        //    await Clients.AddClient(new Client { Name = i + "Client " + DateTime.Now });
        //}

        for (int i = 1000; i < 1020; i++)
        {
            await Products.AddProduct(new Product { ProductId = i.ToString(), Price = i, Quantity = i, Specification = "TEST", Category = "1", Type = "TEST" });
        }

        //        var invoices = new List<Invoice>()
        //{
        //             new Invoice { ClientId = 1, ProductIds = {"1000", "1001", "1002" }, Status = true },
        //             new Invoice { ClientId = 1, ProductIds = {"1003", "1004", "1005" }, Status = false },
        //             new Invoice { ClientId = 2, ProductIds = {"1000", "1006" }, Status = true },
        //             new Invoice { ClientId = 4, ProductIds = {"1000", "1011", "1013" }, Status = true }
        //        };

        //        await Invoices.AddInvoice(invoices[0]);
        //        await Invoices.AddInvoice(invoices[1]); //not paid invoice, what should not appear
        //        await Invoices.AddInvoice(invoices[2]);
        //        await Invoices.AddInvoice(invoices[3]);

        //await Logs.AddLog(new VisitLog() { ClientId = 3, FromProduct = "1000", ToProduct = "1008" });
        //await Logs.AddLog(new VisitLog() { ClientId = 3, FromProduct = "1000", ToProduct = "1009" });
        //await Logs.AddLog(new VisitLog() { ClientId = 2, FromProduct = "1007", ToProduct = "1000" });

        //await Logs.AddLog(new VisitLog() { ClientId = 1, FromProduct = "1016", ToProduct = "1003" });
        //await Logs.AddLog(new VisitLog() { ClientId = 1, FromProduct = "1000", ToProduct = "1015" });
        //await Logs.AddLog(new VisitLog() { ClientId = 2, FromProduct = "1001", ToProduct = "1010" });
        //await Logs.AddLog(new VisitLog() { ClientId = 4, FromProduct = "1002", ToProduct = "1019" });
        //await Logs.AddLog(new VisitLog() { ClientId = 4, FromProduct = "1018", ToProduct = "1002" });


        //var x = new Category() { Description = "TEST1", Name = "Electronics" };
        //await Categories.AddCategory(x);
        //x.CategoryId = "1";
        //var y = new Category() { Description = "TEST2", Name = "Washboards" };
        //await Categories.AddCategory(y);

        //int i1 = 0;
        //foreach (var item in invoices)
        //{
        //    var l = i1; //not sure about if variable 'i' would work correctly here due to async nature
        //    foreach (var id in item.ProductIds)
        //    {
        //        await Neo4j.AddData(item.ClientId, id, x, item.InvoiceId, l);
        //    }
        //    i1++;
        //}
    }

    public async Task Execute()
    {
        productsVisitedOthers.Clear();
        productsSameCategory.Clear();
        productsBoughtSameVisits.Clear();

        //postgres
        client = await Clients.GetClient(ClientId);

        //neo4j
        var orders = await Neo4j.GetOrders(client.ClientId);

        if (!orders.Any())
            return;

        //Mongo
        var paidInvoices = new List<Invoice>();

        foreach (Order order in orders)
        {
            var invoice = await Invoices.GetInvoice(order.InvoiceId);
            if (invoice.Status)
                paidInvoices.Add(invoice);
        }

        if (!paidInvoices.Any())
            return;


        //Продукты из тех же категорий, что и те, которые покупал клиент
        //Neo4j
        var neo4jProducts = await Neo4j.GetProducts(paidInvoices.First().InvoiceId);
        //Redis
        foreach (var p in neo4jProducts)
        {
            var product = await Products.GetProduct(p.ProductId);
            productsSameCategory.Add(product);
        }

        productsSameCategory = productsSameCategory.Distinct(new ProductEqualityComparer()).ToList();

        //Что смотрели вместе с этим продуктом
        var productIds = new List<string>();

        foreach (var invoice1 in paidInvoices.OrderByDescending(x => x.Date).Take(2))
        {
            foreach (var productId in invoice1.ProductIds.Take(5))
            {
                productIds.Add(productId);
                var ClientsSameProduct = await Invoices.GetClientsIdByProduct(productId);
                foreach (var clientId in ClientsSameProduct.Where(x => x.ClientId != client.ClientId).Take(2))
                {
                    var Visited = await Logs.GetLogs(clientId.ClientId);
                    foreach (var log in Visited)
                    {
                        var product = await Products.GetProduct(log.ToProduct);
                        productsVisitedOthers.Add(product);
                    }
                }
            }
        }

        productsVisitedOthers = productsVisitedOthers.Distinct(new ProductEqualityComparer()).ToList();

        //Что покупали те, кто смотрел продукт вместе с ним
        List<Order> ordersSV = new List<Order>();

        foreach (var productId in productIds)
        {
            var sameVisits = await Logs.GetLogsSameProduct(client.ClientId, productId);
            if (sameVisits.Any())
                sameVisits = sameVisits.Distinct(new VisitLogEqualityComparer()); //reduce duplicate Clients
            foreach (var log in sameVisits)
            {
                var ordersSVR = await Neo4j.GetOrders(log.ClientId);
                ordersSV.AddRange(ordersSVR);
            }
        }

        var paidInvoicesSV = new List<Invoice>();

        foreach (Order order in ordersSV)
        {
            var invoice = await Invoices.GetInvoice(order.InvoiceId);
            if (invoice.Status)
                paidInvoicesSV.Add(invoice);
        }

        foreach (var invoice2 in paidInvoicesSV.OrderByDescending(x => x.Date).Take(2))
        {
            foreach (var p in invoice2.ProductIds)
            {
                var product = await Products.GetProduct(p);
                productsBoughtSameVisits.Add(product);
            }
        }

        productsBoughtSameVisits = productsBoughtSameVisits.Distinct(new ProductEqualityComparer()).ToList();

        //Get catergory descriptions
        var categoryIds = (from item in productsBoughtSameVisits.GroupBy(x => x.Category)
                           select item.Key).ToList();
        categoryIds.Union(from item in productsVisitedOthers.GroupBy(x => x.Category)
                          select item.Key);
        categoryIds.Union(from item in productsSameCategory.GroupBy(x => x.Category)
                          select item.Key);

        foreach (var item in categoryIds)
        {
            if(Int32.TryParse(item, out int id))
                categories.Add(await Categories.GetCategory(id));
        }
    }
}
